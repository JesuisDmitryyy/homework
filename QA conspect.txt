Уровни тестирования - Общая цель: выявление дефектов и проблем как можно лучше, еще до выхода продукта на рынок.
Есть четыре уровня: Aceptance testing ; Sysetm testing; Integration testing; Unit testing;
Есть следующие уровни:
 Compontment level; - ( Прогрманый компонент) - Наименьшая тестировочная единица ПО - Может быть как метод, клас, функция или объект зависит от языка прогаммирования. На этом уровне ПО рассматривается как совокупность компонентов. Каждый компонент - независимый блок кода. 
Component testing / Unit testing - Тестирование ПО при котором компоненты / модули ПО проверяются на корректность и соответсвии ожидаемому поведении, рассматриваются компоненты, модули, функции, классы, даже могут быть небольшимы подсистемам зависит от масштаба программы или детализации тестирования.
Основная цель убедится что компонент работает правильно и независимо от остальных частей. могут использоваться заглушки / недвижимые объекты. Среди целей можно выделить рефакторинг (Возможноть переписать код, улучшая его, без страха повредить его функциональность)  Юнит тесты делают разработчики
Test-Driven Development (TDD) - тести на компоненти створюються перед виробництвом самого коду.
Ошибки: Ошибки в логике прогаммы, несоответсвие спецификации, выявление неожиданного поведения, проблемы с обработкой ошибок, недостаточное покрытие кода, ошибка в асинхронном коде.


 Integration level;
Цель: проверка взаимодействия ПО между разными компонентами/ модулями. Фокусируется на проверке правильности взаимодействия этих частей при работе вместе. Объектами могут быть: Компоненты ПО, Сервесы АПИ, Базы данных, Внешние системы, Файловые системы. Делится на Component integration и System integration.
Component integration testing - фокусируется на проверке взаимодействия между разными комопнентами/ модулями ПО и их взаимодействия, 
System integration testing - фокусируется на проверке взаимодействия между разными системами/ компонентами. Как группа компонентов работает вместе. Пример: Интерфейсы между системами; Внешние сервисы Api;  функциональные системы; обработка передачи данных; типичные ошибки: Неправильная передача данных; несоотвествие версий; низкая продуктивность; проблемы с транзакциями;  
Подходы:  Big bang approach  - все компоненты / модули объеденяются и тестируются одновременно, без поэтапного интегрирования, большими партиями. Может быть эффективен в небольших проектах, объем интеграции небольшой
Минусы такого подхода: Сложно определить корневые причины такого подхода, большие риски неудачи, ограниченная возможность раннего выявления ошибок,  сложно провести часть интеграции, отсутсвие гарантии правильного взаимодействия,  Большие задержки в тестировании и релизе
 Подход Top-down - тестирование проводится поэтапно, начиная с самого высокого уровня, и пошагово переходя к более низким уровням, пока все система не будет протестирована как один большой блок. Пошаговая интеграция и можно легко выявить какой компонент не работает. 
Stub - имитатор - заглушка, используется, когда какой-то фрагмент еще не сделан, и имитирует его роль.
Преимущества: ранее выявление ключевых проблем,  изолирование тестирование, ускоренное процесса тестирования
Недостатки: Отсутсвие нижних уровней теста, недостаточное тестирование на нижнем уровне, риск неправильного моделирования поведения
 Подход Bottom-up - метод интеграционного тестирования  в котором тестирование идёт снизу вверх, поэтапное тестирование,  
 В случае, если верхний компонент не готов используется драйвер - фрагмент программного кода, используется для замены не готового элемента кода.
Преимущества- Ранее выявление, проблем нижних уровней, стабильность базовых компонентов, возможность тестирования без зависимостей, простота 
Недостатки - Задержки в тестировании верхних уровней, Отсутсвие контекста для тестирования
System level - Этап тестирования на котором проверяется вся система целиком, соответсвие требованиям и спецификации. В этом этапе  тестирование фокусируется на проверке взаимодействия между компонентами системы и их корректной работе как один функциональный блок.
Цель: соответсвие функциональным и не  функциональым требованиям, Обеспечение стабильности системы, подтверждение качества продукта, снижение рисков, уверенность в успешном введении, доступность и безопастность.
Объектами тестирования являются: полная система и интерфейсы.
Ошибки: функцыиональные ошибки  (неправильная реализация функций, интерфейсные ошибки, продуктивность и эффективность, безопасность, доступность )
Acceptable testing - Этап в процессе тестирования  ПО, когда система проверяется на соответсвие определенным требованиям, и ожиданиям заказчика,
Объектами являются - різні рівні програмного забезпечення, включаючи окремі компоненти, підсистеми, модулі або вся система в цілому. Бизнес процессы, процессы эксплуатации, система тестирующаяся, Production data. 
Типичные ошибки: Несоответсвие бизнес-требованиям, Ошибки в интерфейсе пользователя. Некоректность бизнесс процессов.
Functional testing - Проверка выполняет ли продукт все функции и операции в соответсвии с требованиями,
Non- functional testing -  Проверка характеристик програмного продукта: безопасность,надежность, масштабность, совместимость, доступность, эффективность, удобство. 
    Performance testing: 
Load (Проверка нагруженности системы, под большим наплывом пользователей или транзакций, как программа действует при нормальных нагрузках(Много пользователей одновременно делают добавление в корзину) ) -
 Stress - Тестирование в стресс, выявление работоспособности системы в стрессовой ситуации. Оч много покупателей делают много-много действий. Будет ли программа работать эффективно ?
 Scalability - Тестирование продукта нацеленное на выявлении работоспособности при увеличении нагрузки. 
Spike - Тестирование при резком уыеличении нагрузки проверяет реакцию продукта на резкое увеличении пользователей делающих действие, а затем утихаюзее а потом снова
 Endurance - Тестирование стойкости проводится для проверки ПО нагрузки в течении долгого времени 
 Volume - Тестирование объема проверяет реакцию прогамного продукта на большое кол-во данных, которое сохраняется или обрабатывается
Usabilit testing - 
Security testing - 
Compability testing - 
Configuration testing - 
User interface testing - 
Internalization testing - 
Localization testing - 
Accessibility testing - 
 White box - Тестер имеет  полный доступ к внутреней структуре и коду ПО, может проверять как система работает всередине, создавать тест сценарии. Пример: Тестирование функций,  методов прогрманого кода, выявление неправильных условий в входных данных, проверка циклов на корресктность выполнения.
 Gray box -Ограниченный ресурс к внутреней структуре, может испоьзовать документацию,  спецификаций и проч. Целью является - проверка соответсвие внутреним и внешним аспектам системы.
 Black box - Тестирование при котором у тестера нет доступа к внутреним структуре, работает только с внешним интерфейсом и спецификацией, Проверяет систему с точки зрения пользователя независимо от внутреней логики.

Smoke testing - выполняется для быстрой проверки основных функций и стабильности програмного продукта после внесения  изменений в прогмамму, для проверки отсутсвия ошибок.
Sanity testing - узконаправленное тестирование, которое фокусируется на том чтобы доказать что конкретная функция работает правильно. Используется для определения работоспособности опреденной функции.
Retest - выполняется для проверки тест-кейсов или сценариев, в которых были выявлены ошибки или оказались неуспешными во время тестирования после исправления ошибок.
Regression testing - Процесс проверки програмного продукта с целью подтверждения, что новые изменения внесенные в код или исправление ошибок не создали новых дефектов или не  сломали действующий функционал.
end 2 end testing - переконатися, що система працює коректно в реальних умовах і що функціональність системи інтегрована правильно.


 Component integration level;
   System integration level; system level;
 Acceptance level;